import json
import os
import re
import static

from char_common import parse_scales, parse_skills

dirname = os.path.dirname(__file__)
data_dir = os.path.join(dirname, '../../dimrepo/ExcelBinOutput/')
out_dir = os.path.join(dirname, '../../src/js/db/generated/')

names_mapping = {
    '1-Hit DMG': 'normal_hit_1',
    '2-Hit DMG': 'normal_hit_2',
    '3-Hit DMG': 'normal_hit_3',
    '4-Hit DMG': 'normal_hit_4',
    '5-Hit DMG': 'normal_hit_5',
    '6-Hit DMG': 'normal_hit_6',
    'Aimed Shot': 'aimed',
    'Fully-Charged Aimed Shot': 'charged_aimed',
    'Plunge DMG': 'plunge',
    'Low/High Plunge DMG': 'plunge_low/plunge_high',
    'Charged Attack': 'charged_hit',
    'Charged Attack DMG': 'charged_hit',
    'Charged Attack Stamina Cost': 'stamina_cost',
    'Charged Attack Spinning DMG': 'charged_spin',
    'Charged Attack Final DMG': 'charged_final',
    'Max Duration': 'max_duration',
    'CD': 'cd',
    'Duration': 'duration',
    'Energy Cost': 'energy_cost',
    'Elemental Burst DMG': 'burst_dmg',
}


def shrink_table(data):
    last = None
    for index in reversed(range(len(data))):
        val = data[index]

        if last is None:
            last = val
            continue

        if val == last:
            data.pop()
            continue

        break

    return data


def format_table(data, fmt):
    isPercent = fmt.find('P') >= 0

    def foramt_value(val):
        if isPercent:
            val *= 100
        return static.trimValue(val)

    # data = list(map(foramt_value, data))
    data = [foramt_value(x) for x in data]

    return shrink_table(data)


def make_tables(data):
    params = {}
    processed = {}
    levels = data['levels'].keys()
    for index in range(0, len(data['levels'][1])):
        params[index+1] = []

        for level in levels:
            params[index+1].append(data['levels'][level][index])

    for desc in data['desc']:
        if not desc:
            continue
        (name, params_str) = desc.split('|')
        params_indices = re.findall(r'param(\d+):(\w+)\b', params_str)

        name = re.sub(r'\#?{LAYOUT_PC#(.*?)\}', '\g<1>', name)
        name = re.sub(r'\#?{.*?}', '', name)
        # name = names_mapping.get(name, name)

        for (ind, fmt) in params_indices:
            ind = int(ind)

            if ind in processed:
                continue
            processed[ind] = 1

            out.write('\t\t\t// ' + name + '\n\t\t\t')
            out.write('p%d: [%s],\n' % (ind, ', '.join(
                format_table(params.get(ind, []), fmt)
            )))
            del params[ind]


def parse_char_skills(charName, scales, skills, depotId, groupmap):
    skillsIds = skills.get(depotId)

    out.write("\t" + charName + ': {\n')
    for (index, id) in enumerate(sorted(skillsIds)):
        scale = scales.get(id)
        out.write(f'\t\ts{str(index + 1)}_id: {groupmap.get(id) or 0 },\n')
        out.write("\t\ts" + str(index + 1) + ": {\n")
        make_tables(scale)
        out.write("\t\t},\n")

    out.write('\t},\n')


def parse_chars():
    file = open(data_dir + 'AvatarExcelConfigData.json', 'r')

    (skills, groupmap) = parse_skills()
    scales = parse_scales()
    chars = {}

    for item in json.load(file):
        charId = item['id']
        charName = static.getCharById(charId)

        if not charName:
            continue
        chars[charName] = item

    for charName in sorted(chars.keys()):
        item = chars[charName]

        depotIds = item.get('candSkillDepotIds', [])
        if len(depotIds) > 1:
            for depotId in depotIds:
                charName = static.getCharById(depotId)
                if not charName:
                    continue
                parse_char_skills(charName, scales, skills, depotId, groupmap)
        else:
            parse_char_skills(charName, scales, skills, item.get('skillDepotId'), groupmap)


out = open(out_dir + 'CharTalentTables.js', 'w', encoding='utf-8')
out.write('// This file is autogenerated\n')
out.write('export const charTalentTables = {\n')

parse_chars()

out.write('};\n')
